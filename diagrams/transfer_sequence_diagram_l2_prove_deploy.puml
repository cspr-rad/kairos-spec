@startuml
autoactivate on
actor "Bob :: User" as Bob
participant CasperWallet
box "l2-stack" #LightBlue
participant WebClient
participant ApiServer
participant Database
participant Prover
participant CasperNode
end box
box "on-chain" #LightGreen
participant VerifyTransferSession
participant ValidiumContract
end box

activate CasperNode
activate ApiServer

note over CasperNode, VerifyTransferSession
At some point the deploy gets executed on-chain.
end note

CasperNode -> VerifyTransferSession: call()

note over VerifyTransferSession, ValidiumContract
This is where we verify the proof,
we obviously need to provide the public inputs
end note

VerifyTransferSession -> ValidiumContract: verify_entrypoint(new_account_balances_root_hash, proof, Vector<{sender, receiver, amount})

note over ValidiumContract, ValidiumContract
If proof is Ok then
end note
ValidiumContract -> ValidiumContract: update_state_entrypoint(new_account_balances_root_hash)
ValidiumContract --> ValidiumContract: Ok
ValidiumContract --> VerifyTransferSession: Ok 
VerifyTransferSession --> CasperNode: end call()
@enduml

Note Over CasperNode, ApiServer: After the deploy gets processed we get notified
CasperNode ->>+ ApiServer: DeployProcessed
ApiServer ->>+ ApiServer: eventHandler(event :: DeployProcessed)
ApiServer ->>+ Database: insert_transfers(Vector of (sender :: User, receiver :: User, amount :: Money))
Database -->>- ApiServer: Ok
ApiServer ->> WebClient: trigger_refresh
ApiServer -->>- ApiServer: end eventHandler

WebClient ->>+ ApiServer: GET /balance
ApiServer ->>+ Database: get_balance(user: Bob :: User)
Database -->>- ApiServer: balance :: Balance
ApiServer -->>- WebClient: balance :: Balance
WebClient ->> Bob: notify

CasperNode -->>- ApiServer: ...
