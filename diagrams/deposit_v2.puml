@startuml
autoactivate on
actor "Bob :: User" as Bob
box "L2-stack" #LightBlue
participant ClientCli
participant L1Sdk
participant L2Node
participant DataStore
participant Prover
participant L1Node
end box
box "on-chain" #LightGreen
participant DepositSession
participant StateContract
end box

activate L1Node
activate L2Node

L2Node -> L1Node: subscribe(DeployProcessed)
Bob -> ClientCli: deposit(Amount, TokenId, KeyPair)
ClientCli -> L2Node: deposit(depositor :: PubKey, Amount, TokenId)

L2Node -> L2Node: create_deposit_deploy(\n\tdepositor :: PubKey,\n\tAmount\n\tTokenId\n)

L2Node --> L2Node: deposit_deploy_res :: Result<Deploy, Err>
L2Node --> ClientCli: deposit_deploy_res :: Result<Deploy, Err>

ClientCli -> L1Sdk: sign_deploy(deposit_deploy :: Deploy, SecKey)
L1Sdk --> ClientCli: SignedDeploy

ClientCli -> L2Node: /deploy/forward/<SignedDeploy>
L2Node -> L1Node: account_put_deploy(SignedDeploy)
L1Node --> L2Node: [[https://docs.casper.network/developers/json-rpc/json-rpc-transactional/#account_put_deploy_result AccountPutDeployResult]]
L2Node --> ClientCli: DeployHash
ClientCli --> Bob: DeployHash

L1Node -> DepositSession: call()
DepositSession -> DepositSession: transfer_from_purse_to_purse(\n\tdepositor :: PubKey,\n\tl2_purse :: PubKey,\n\tAmount, TokenId\n)
DepositSession --> DepositSession: Ok
DepositSession -> StateContract: register_deposit(\n\tdepositor :: PubKey,\n\tAmount,\n\tTokenId\n)
StateContract -> StateContract: storage::increment(num_deposits_reference)
StateContract --> StateContract: Ok
StateContract -> StateContract: storage::write_dict(\n\tunprocessed_deposits_reference,\n\tnum_deposits_reference,\n\t(depositor :: PubKey,Amount, TokenId)\n)
StateContract --> StateContract: Ok
StateContract --> DepositSession: Ok
DepositSession --> L1Node: end call()

L1Node -> L2Node: event_handler(event :: DeployProcessed)
note over L2Node, L1Node
The event handler serves as a trigger for manual verification it's not trusted itself.
end note
L2Node -> L1Node: [[https://docs.casper.network/developers/json-rpc/json-rpc-informational/#chain-get-state-root-hash chain_get_state_root_hash]]()
L1Node --> L2Node: root_hash_res :: [[https://docs.casper.network/developers/json-rpc/json-rpc-informational/#chain_get_state_root_hash_result ChainGetStateRootHashResult]]

L2Node -> L1Node: [[https://docs.casper.network/developers/json-rpc/json-rpc-informational/#query-global-state query_global_state]](root_hash_res.root_hash, num_deposits_reference)
L1Node --> L2Node: num_deposits_res :: [[https://docs.casper.network/developers/json-rpc/json-rpc-informational/#query_global_state_result QueryGlobalStateResult]]

loop for every unprocessed_deposit determined using num_deposits_res.stored_value

L2Node -> L1Node: [[https://docs.casper.network/developers/json-rpc/json-rpc-informational/#state-get-dictionary-item state_get_dictionary_item]](root_hash_res.root_hash, unprocessed_deposit_reference)
L1Node --> L2Node: deposit_res :: [[https://docs.casper.network/developers/json-rpc/json-rpc-informational/#state-get-dictionary-item StateGetDictionaryItemResult]]
note over L2Node, DataStore
Add this deploy to the next batch. Funds are not available until the batch proof is verified.
end note
L2Node -> DataStore: add_transaction_to_next_batch(deposit_res.into::<Transaction>())
DataStore --> L2Node: Ok
end
L2Node --> L2Node: end event_handler
@enduml
